- name: Ensure Virtual Machine Configurations
  hosts: all

  tasks:
    - name: Update and upgrade apt packages
      become: yes
      apt:
        upgrade: yes
        update_cache: yes
        cache_valid_time: 3600

    - name: Install n
      command: curl -L https://bit.ly/n-install | bash

    - name: Install node
      command: n 18

    - name: Install pnpm and yarn
      command: npm install -g pnpm && npm install -g yarn

    # - name: Install go-language

    - name: Install required packages for apt over HTTPS
      become: yes
      apt:
        name:
          - apt-transport-https
          - apache2-utils
          - ca-certificates
          - curl
          - gnupg-agent
          - build-essential
          - openssh-server
          - fail2ban
          - python3
          - zsh
          - git
          - software-properties-common
        state: present

    - name: Add Docker's official GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Set up the Docker stable repository
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_lsb.codename }} stable"
        state: present

    - name: Install Docker CE
      become: yes
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: present
        update_cache: yes

    - name: Ensure docker group is present
      group:
        name: docker
        state: present

    - name: Add current user to docker group
      user:
        name: "sarthakjdev"
        groups: docker
        append: yes

    - name: Install Docker-compose
      become: yes
      apt:
        name: docker-compose
        state: present

    - name: Setup docker services on boot
      systemd:
        name: docker
        enabled: yes
        state: restarted
        daemon_reload: yes

    - name: Dockerhub authorization
      docker_login:
        username: sarthakjdev
        password: "{{ DOCKER_PASSWORD }}"

    - name: Check if Docker Swarm is initialized
      command: docker info --format "{{'{{'}}.Swarm.LocalNodeState{{'}}'}}"
      register: docker_swarm_status
      changed_when: false
      failed_when: docker_swarm_status.rc not in [0, 1]

    - name: Initialize Docker Swarm
      command: docker swarm init
      when: docker_swarm_status.stdout != 'active'

    - name: Cloning git repo
      git:
        repo: https://github.com/sarthakjdev/home-server-setup.git
        dest: ~/home-server-setup
        single_branch: yes
        version: master

    - name: Create docker network
      command: docker network Create --driver=overlay home-server-internal-network

    - name: Deploy file server stack
      command: docker deploy stack -c ~/home-server-setup/deploy/file-server/file-server-docker-compose.yaml home_file_server_stack

    - name: Deploy monitoring stack
      command: docker deploy stack -c ~/home-server-setup/deploy/monitoring/monitoring-docker-compose.yaml home_monitoring_stack

    - name: Deploy logging stack
      command: docker deploy stack -c ~/home-server-setup/deploy/logging/logging-docker-compose.yaml home_logging_stack

    - name: Deploy Nginx Reverse Proxy
      command: docker deploy stack -c ~/home-server-setup/deploy/nginx/web-server-docker-compose.yaml home_web_server_stack
